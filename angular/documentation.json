{
    "pipes": [],
    "interfaces": [
        {
            "name": "Task",
            "id": "interface-Task-3028d2646c1fd8b5e4f09289bf36c345",
            "file": "src/app/models/task.ts",
            "type": "interface",
            "sourceCode": "export interface Task {\n  id: string;\n  title: string;\n  date: string;\n  color: string;\n  isFavorite: boolean;\n  isArchived: boolean;\n}\n",
            "properties": [
                {
                    "name": "color",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "date",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "isArchived",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "isFavorite",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "TasksStorageService",
            "id": "injectable-TasksStorageService-50a96a0ae6867dd14477c5cc0626c038",
            "file": "src/app/services/tasks-storage/tasks-storage.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getMockTasks",
                    "args": [],
                    "optional": false,
                    "returnType": "Task[]",
                    "typeParameters": [],
                    "line": 34,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "getTaskById",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Task",
                    "typeParameters": [],
                    "line": 30,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTasks",
                    "args": [],
                    "optional": false,
                    "returnType": "Task[]",
                    "typeParameters": [],
                    "line": 21
                },
                {
                    "name": "saveTask",
                    "args": [
                        {
                            "name": "task",
                            "type": "Task"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "Task",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {Task} from '../../models/task';\nimport { TaskModel } from '../../models/task.model';\nimport { Colors } from '../../models/colors';\n\nconst TASKS_STORAGE_KEY = 'tasks';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TasksStorageService {\n\n  constructor() { }\n\n  saveTask(task: Task): void {\n    const tasks = this.getTasks();\n    tasks.push(task);\n    localStorage.setItem(TASKS_STORAGE_KEY, JSON.stringify(tasks));\n  }\n\n  getTasks(): Task[] {\n    const tasksFromStorage = localStorage.getItem(TASKS_STORAGE_KEY);\n    if (tasksFromStorage === null) {\n      return this.getMockTasks();\n    } else {\n      return JSON.parse(tasksFromStorage);\n    }\n  }\n\n  getTaskById(id: string): Task {\n    return this.getTasks().filter(task => task.id === id)[0];\n  }\n\n  private getMockTasks(): Task[] {\n    return [\n      new TaskModel(\n        '1',\n        'task 1',\n        new Date('1995-12-17T03:24:00').toDateString(),\n        Colors.RED,\n        false,\n        false\n      ),\n      new TaskModel(\n        '2',\n        'task 2',\n        new Date().toDateString(),\n        Colors.CYAN,\n        false,\n        false\n      ),\n      new TaskModel(\n        '3',\n        'task 3',\n        new Date().toDateString(),\n        Colors.GREEN,\n        false,\n        false\n      ),\n      new TaskModel(\n        '4',\n        'task 4',\n        new Date().toDateString(),\n        Colors.RED,\n        true,\n        false\n      ),\n      new TaskModel(\n        '5',\n        'task 5',\n        new Date().toDateString(),\n        Colors.CYAN,\n        true,\n        false\n      ),\n      new TaskModel(\n        '6',\n        'task 6',\n        new Date().toDateString(),\n        Colors.GREEN,\n        false,\n        true\n      )\n    ];\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 11
            },
            "type": "injectable"
        },
        {
            "name": "ThemeService",
            "id": "injectable-ThemeService-3de864f2475eb2c304735d77288fe2f1",
            "file": "src/app/services/theme/theme.service.ts",
            "properties": [
                {
                    "name": "isDark$",
                    "defaultValue": "new BehaviorSubject<boolean>(this.themeStorage.getIsDarkTheme())",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "renderer",
                    "type": "Renderer2",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable, Renderer2, RendererFactory2 } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { ThemeStorageService } from '../theme-storage/theme-storage.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ThemeService {\n  // By default is light theme\n  isDark$ = new BehaviorSubject<boolean>(this.themeStorage.getIsDarkTheme());\n\n  private renderer: Renderer2;\n\n  constructor(\n    private themeStorage: ThemeStorageService,\n    private rendererFactory: RendererFactory2\n  ) {\n    this.renderer = rendererFactory.createRenderer(null, null);\n\n    this.isDark$.subscribe((value: boolean) => {\n      const BODY_DARK_CLASS = 'dark';\n      value\n        ? this.renderer.addClass(document.body, BODY_DARK_CLASS)\n        : this.renderer.removeClass(document.body, BODY_DARK_CLASS);\n\n      this.themeStorage.saveIsDarkTheme(value);\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "themeStorage",
                        "type": "ThemeStorageService"
                    },
                    {
                        "name": "rendererFactory",
                        "type": "RendererFactory2"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "themeStorage",
                        "type": "ThemeStorageService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "rendererFactory",
                        "type": "RendererFactory2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ThemeStorageService",
            "id": "injectable-ThemeStorageService-7498ffa30c110d83f706006ca4a204eb",
            "file": "src/app/services/theme-storage/theme-storage.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getIsDarkTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 16
                },
                {
                    "name": "saveIsDarkTheme",
                    "args": [
                        {
                            "name": "isDark",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "jsdoctags": [
                        {
                            "name": "isDark",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\n\nconst DARK_THEME_STORAGE_KEY = 'isDark';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ThemeStorageService {\n\n  constructor() { }\n\n  saveIsDarkTheme(isDark: boolean): void {\n    localStorage.setItem(DARK_THEME_STORAGE_KEY, isDark.toString());\n  }\n\n  getIsDarkTheme(): boolean {\n    return localStorage.getItem(DARK_THEME_STORAGE_KEY) === 'true';\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-a0db91bfa3b9914e9048612074084ee6",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl) as Promise<unknown>;\n  }\n\n  getTitleText(): Promise<string> {\n    return element(by.css('app-root .content span')).getText() as Promise<string>;\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "TaskModel",
            "id": "class-TaskModel-c2a30027454a276078dfe0d80c71fe04",
            "file": "src/app/models/task.model.ts",
            "type": "class",
            "sourceCode": "import {Task} from './task';\n\nexport class TaskModel implements Task {\n  id: string;\n  title: string;\n  date: string;\n  color: string;\n  isFavorite: boolean;\n  isArchived: boolean;\n\n  constructor(\n    id,\n    title,\n    date,\n    color,\n    isFavorite,\n    isArchived\n  ) {\n    this.id = id;\n    this.title = title;\n    this.date = date;\n    this.color = color;\n    this.isFavorite = isFavorite;\n    this.isArchived = isArchived;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "id",
                        "type": ""
                    },
                    {
                        "name": "title",
                        "type": ""
                    },
                    {
                        "name": "date",
                        "type": ""
                    },
                    {
                        "name": "color",
                        "type": ""
                    },
                    {
                        "name": "isFavorite",
                        "type": ""
                    },
                    {
                        "name": "isArchived",
                        "type": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "id",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "title",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "date",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "color",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "isFavorite",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "isArchived",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "color",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "date",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "isArchived",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "isFavorite",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Task"
            ]
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-e35b97caed3504410163542fe62e607a",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isDark$",
                    "defaultValue": "this.themeService.isDark$",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "changeTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { ThemeService } from './services/theme/theme.service';\nimport { BehaviorSubject } from 'rxjs';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent {\n  isDark$: BehaviorSubject<boolean> = this.themeService.isDark$;\n\n  constructor(\n    private themeService: ThemeService,\n  ) {}\n\n  changeTheme(): void {\n    this.isDark$.next(!this.isDark$.getValue());\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "main {\n  min-height: 812px;\n  height: 100%;\n  width: 100%;\n}\n\n.title {\n  cursor: pointer;\n  margin-top: 15px;\n  display: flex;\n  font-weight: 900;\n  font-size: 24pt;\n  margin-bottom: 9px;\n  transition: 200ms;\n\n  &.dark {\n    color: white;\n  }\n\n  span {\n    color: #2094f9;\n  }\n}\n\nheader {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\n.buttons {\n  margin-top: 6px;\n  display: flex;\n  align-items: flex-end;\n  height: 100%;\n\n  img {\n    margin-left: 12px;\n  }\n}\n",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "themeService",
                        "type": "ThemeService"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "themeService",
                        "type": "ThemeService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"wrapper\">\n  <header>\n    <div class=\"title\" [ngClass]=\"{'dark': isDark$ | async}\" routerLink=\"/\">Delat<span>'</span></div>\n    <div class=\"buttons\">\n      <img [src]=\"(isDark$ | async) ? 'assets/svg/delete-dark-24px.svg' : 'assets/svg/delete-24px.svg'\" routerLink=\"/trashcan\">\n      <img [src]=\"(isDark$ | async) ? 'assets/svg/wb_sunny-dark-24px.svg' : 'assets/svg/wb_sunny-24px.svg'\" class=\"dark\" (click)=\"changeTheme()\">\n    </div>\n  </header>\n  <main>\n    <router-outlet></router-outlet>\n  </main>\n</div>\n"
        },
        {
            "name": "ColorPickerComponent",
            "id": "component-ColorPickerComponent-410b112462fd7e767c5dcf148111367e",
            "file": "src/app/ui/color-picker/color-picker.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-color-picker",
            "styleUrls": [
                "./color-picker.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./color-picker.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "isDark",
                    "line": 13,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "colorSelect",
                    "defaultValue": "new EventEmitter<string>()",
                    "line": 10,
                    "type": "EventEmitter"
                },
                {
                    "name": "outsideClick",
                    "defaultValue": "new EventEmitter<void>()",
                    "line": 11,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "colors",
                    "defaultValue": "Object.keys(Colors)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "wasInside",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32
                },
                {
                    "name": "onColor",
                    "args": [
                        {
                            "name": "color",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "jsdoctags": [
                        {
                            "name": "color",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [],
                    "argsDecorator": [],
                    "line": 20
                },
                {
                    "name": "document:click",
                    "args": [],
                    "argsDecorator": [],
                    "line": 25
                }
            ],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Output, EventEmitter, Input, HostListener } from '@angular/core';\nimport { Colors } from '../../models/colors';\n\n@Component({\n  selector: 'app-color-picker',\n  templateUrl: './color-picker.component.html',\n  styleUrls: ['./color-picker.component.scss'],\n})\nexport class ColorPickerComponent implements OnInit {\n  @Output() colorSelect = new EventEmitter<string>();\n  @Output() outsideClick = new EventEmitter<void>();\n\n  @Input() isDark: boolean;\n\n  readonly colors = Object.keys(Colors);\n\n  private wasInside = false;\n\n  @HostListener('click')\n  clickInside(): void {\n    this.wasInside = true;\n  }\n\n  @HostListener('document:click')\n  clickOutside(): void {\n    this.outsideClick.emit();\n    this.wasInside = false;\n  }\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  onColor(color: string): void {\n    this.colorSelect.emit(color);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'colors.scss';\n\n:host {\n  z-index: 1;\n}\n\n.color-picker {\n  width: 128px;\n  height: 64px;\n  display: grid;\n  grid-template-columns: auto auto auto auto;\n  box-shadow: 0px 0px 10px 0px rgba(0, 0, 0, 0.1);\n  border-radius: 3px;\n  z-index: 1;\n  background-color: #ffffff;\n  transition: 200ms;\n\n  &.dark {\n    background-color: #000000;\n    box-shadow: 0px 0px 10px 0px rgba($yellow, 0.7);\n  }\n}\n\n.color {\n  cursor: pointer;\n  margin-right: 2px;\n  width: 21px;\n  height: 21px;\n  background-color: gray;\n  border-radius: 100%;\n  box-sizing: border-box;\n  justify-self: center;\n  align-self: center;\n  transition: 200ms;\n\n  &:hover {\n    transform: scale(1.2);\n  }\n\n  &--red {\n    background-color: $red;\n  }\n\n  &--orange {\n    background-color: $orange;\n  }\n\n  &--yellow {\n    background-color: $yellow;\n  }\n\n  &--green {\n    background-color: $green;\n  }\n\n  &--cyan {\n    background-color: $cyan;\n  }\n\n  &--blue {\n    background-color: $blue;\n  }\n\n  &--dark-blue {\n    background-color: $dark-blue;\n  }\n\n  &--purple {\n    background-color: $purple;\n  }\n}\n",
                    "styleUrl": "./color-picker.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 28
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"color-picker\" [ngClass]=\"{'dark': isDark}\">\n  <div *ngFor=\"let color of colors\" class=\"color color--{{color | lowercase}}\" (click)=\"onColor(color)\"></div>\n</div>\n"
        },
        {
            "name": "DateInputComponent",
            "id": "component-DateInputComponent-a8966ad1cd8c6057759e3b7c503849c1",
            "file": "src/app/ui/date-input/date-input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => DateInputComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "app-date-input",
            "styleUrls": [
                "./date-input.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./date-input.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "form",
                    "defaultValue": "this.fb.group({\n    day: ['', [Validators.required]],\n    month: ['', [Validators.required]],\n    year: ['', [Validators.required]]\n  })",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "onTouch",
                    "defaultValue": "() => {...}",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, forwardRef, OnInit } from '@angular/core';\nimport { ControlValueAccessor, FormBuilder, FormGroup, NG_VALUE_ACCESSOR, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-date-input',\n  templateUrl: './date-input.component.html',\n  styleUrls: ['./date-input.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => DateInputComponent),\n      multi: true,\n    },\n  ],\n})\nexport class DateInputComponent implements ControlValueAccessor, OnInit {\n  form: FormGroup = this.fb.group({\n    day: ['', [Validators.required]],\n    month: ['', [Validators.required]],\n    year: ['', [Validators.required]]\n  });\n\n  constructor(private fb: FormBuilder) {}\n\n  onChange: any = () => {};\n  onTouch: any = () => {};\n\n  set value(value) {\n    this.onChange(value);\n    this.onTouch(value);\n  }\n\n  writeValue(value: any): void {\n    this.value = value;\n  }\n\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.onTouch = fn;\n  }\n\n  ngOnInit(): void {\n    this.form.valueChanges.subscribe(value => {\n      console.log(value);\n      this.writeValue(\n        new Date(\n          this.form.controls.year.value > 0 ? this.form.controls.year.value - 1 : 0,\n          this.form.controls.month.value > 0 ? this.form.controls.month.value - 1 : 0,\n          this.form.controls.day.value > 0 ? this.form.controls.day.value - 1 : 0,\n          0,\n          0,\n          0,\n          0)\n      );\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".date-input {\n  display: flex;\n  align-items: center;\n}\n\ninput {\n  margin-left: 3px;\n  border: 3px solid #000000;\n  border-radius: 3px;\n  width: 50px;\n}\n",
                    "styleUrl": "./date-input.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "ControlValueAccessor",
                "OnInit"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 28,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<div class=\"date-input\" [formGroup]=\"form\">\n  <input placeholder=\"Day\" formControlName=\"day\" type=\"number\">\n  <input placeholder=\"Month\" formControlName=\"month\" type=\"number\">\n  <input placeholder=\"Year\" formControlName=\"year\" type=\"number\">\n</div>\n"
        },
        {
            "name": "HomeComponent",
            "id": "component-HomeComponent-445a7663db6c2d0a9587b49e8910d35a",
            "file": "src/app/components/home/home.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home",
            "styleUrls": [
                "./home.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./home.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "favoriteTasks",
                    "type": "Task[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "isDark$",
                    "defaultValue": "this.themeService.isDark$",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "soonTasks",
                    "type": "Task[]",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "tasks",
                    "type": "Task[]",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "todayTasks",
                    "type": "Task[]",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { ThemeService } from '../../services/theme/theme.service';\nimport { BehaviorSubject } from 'rxjs';\nimport { TasksStorageService } from '../../services/tasks-storage/tasks-storage.service';\nimport { Task } from 'src/app/models/task';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss']\n})\nexport class HomeComponent implements OnInit {\n  isDark$: BehaviorSubject<boolean> = this.themeService.isDark$;\n  tasks: Task[];\n  todayTasks: Task[];\n  favoriteTasks: Task[];\n  soonTasks: Task[];\n\n  constructor(\n    private themeService: ThemeService,\n    private tasksStorage: TasksStorageService\n  ) { }\n\n  ngOnInit(): void {\n    this.tasks = this.tasksStorage.getTasks();\n    this.todayTasks = this.tasks.filter(task => task.date === new Date().toDateString()\n      && task.isFavorite === false\n      && task.isArchived === false);\n    this.favoriteTasks = this.tasks.filter(task => task.isFavorite === true && task.isArchived === false);\n    this.soonTasks = this.tasks.filter(task => task.date !== new Date().toDateString()\n      && task.isFavorite === false\n      && task.isArchived === false);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".input__new {\n  border: 3px solid #000;\n  border-radius: 3px;\n  width: 100%;\n  height: 40px;\n  padding: 0 9px;\n  box-sizing: border-box;\n  background: none;\n\n  &.dark {\n    border: 3px solid #fff;\n\n    &::placeholder {\n      color: #fff;\n    }\n  }\n\n  &::placeholder {\n    color: #000;\n  }\n}\n\n.show-more {\n  cursor: pointer;\n  width: 100%;\n  text-align: center;\n  color: #2094f9;\n}\n",
                    "styleUrl": "./home.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "themeService",
                        "type": "ThemeService"
                    },
                    {
                        "name": "tasksStorage",
                        "type": "TasksStorageService"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "themeService",
                        "type": "ThemeService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "tasksStorage",
                        "type": "TasksStorageService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"wrapper\">\n  <input\n    type=\"text\"\n    placeholder=\"New...\"\n    class=\"input__new\"\n    routerLink=\"new\"\n    [ngClass]=\"{'dark': isDark$ | async}\">\n  <section>\n    <app-section-title\n      title=\"Today\"\n      [isDark]=\"isDark$ | async\"\n      [clickable]=\"true\"\n      [routerLink]=\"'section-settings'\"\n      [queryParams]=\"{title: 'today'}\"></app-section-title>\n    <app-task-item\n      *ngFor=\"let task of todayTasks\"\n      [title]=\"task.title\"\n      [color]=\"task.color\"\n      [isDark]=\"isDark$ | async\"\n      [routerLink]=\"'task'\"\n      [queryParams]=\"{id: task.id}\"></app-task-item>\n  </section>\n  <section>\n    <app-section-title\n      title=\"Favourites\"\n      [isDark]=\"isDark$ | async\"\n      [clickable]=\"true\"\n      [routerLink]=\"'section-settings'\"\n      [queryParams]=\"{title: 'favourites'}\"></app-section-title>\n    <app-task-item\n      *ngFor=\"let task of favoriteTasks\"\n      [title]=\"task.title\"\n      [color]=\"task.color\"\n      [isDark]=\"isDark$ | async\"\n      [isFavorite]=\"true\"\n      [routerLink]=\"'task'\"\n      [queryParams]=\"{id: task.id}\"></app-task-item>\n  </section>\n  <section>\n    <app-section-title\n      title=\"Soon\"\n      [isDark]=\"isDark$ | async\"\n      [clickable]=\"true\"\n      [routerLink]=\"'section-settings'\"\n      [queryParams]=\"{title: 'soon'}\"></app-section-title>\n    <app-task-item\n      *ngFor=\"let task of soonTasks\"\n      [title]=\"task.title\"\n      [color]=\"task.color\"\n      [isDark]=\"isDark$ | async\"\n      [routerLink]=\"'task'\"\n      [queryParams]=\"{id: task.id}\"></app-task-item>\n  </section>\n  <div class=\"show-more\">Show more...</div>\n</div>\n"
        },
        {
            "name": "MoreMenuComponent",
            "id": "component-MoreMenuComponent-2110f455a52a0b4483742706b712f196",
            "file": "src/app/ui/more-menu/more-menu.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-more-menu",
            "styleUrls": [
                "./more-menu.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./more-menu.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-more-menu',\n  templateUrl: './more-menu.component.html',\n  styleUrls: ['./more-menu.component.scss']\n})\nexport class MoreMenuComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".more-menu {\n  width: 128px;\n  height: 300px;\n  box-shadow: 0px 0px 10px 0px rgba(0, 0, 0, 0.1);\n  border-radius: 3px;\n  z-index: 1;\n  background-color: #ffffff;\n  transition: 200ms;\n}\n",
                    "styleUrl": "./more-menu.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>more-menu works!</p>\n"
        },
        {
            "name": "NewCardComponent",
            "id": "component-NewCardComponent-3c1d9bfb96b7a11eb4b7449219606830",
            "file": "src/app/components/new-card/new-card.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-new-card",
            "styleUrls": [
                "./new-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./new-card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "color",
                    "defaultValue": "Colors.RED",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "form",
                    "defaultValue": "this.fb.group({\n    id: [''],\n    title: [''],\n    date: [new Date()],\n    color: [Colors.RED],\n    isFavorite: [false],\n    isArchived: [false]\n  })",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "isColorPickerActive",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "isDark$",
                    "defaultValue": "this.themeService.isDark$",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37
                },
                {
                    "name": "onCancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41
                },
                {
                    "name": "onCloseColorPicker",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60
                },
                {
                    "name": "onColorPicker",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onColorSelect",
                    "args": [
                        {
                            "name": "color",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "jsdoctags": [
                        {
                            "name": "color",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51
                },
                {
                    "name": "onDone",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { ThemeService } from '../../services/theme/theme.service';\nimport { BehaviorSubject } from 'rxjs';\nimport { Colors } from '../../models/colors';\nimport { TasksStorageService } from '../../services/tasks-storage/tasks-storage.service';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { Task } from 'src/app/models/task';\n\n@Component({\n  selector: 'app-new-card',\n  templateUrl: './new-card.component.html',\n  styleUrls: ['./new-card.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NewCardComponent implements OnInit {\n  isDark$: BehaviorSubject<boolean> = this.themeService.isDark$;\n  isColorPickerActive = false;\n  color = Colors.RED;\n\n  form: FormGroup = this.fb.group({\n    id: [''],\n    title: [''],\n    date: [new Date()],\n    color: [Colors.RED],\n    isFavorite: [false],\n    isArchived: [false]\n  });\n\n  constructor(\n    private router: Router,\n    private themeService: ThemeService,\n    private tasksStorage: TasksStorageService,\n    private fb: FormBuilder\n  ) { }\n\n  ngOnInit(): void {\n    this.form.valueChanges.subscribe(x => console.log(x));\n  }\n\n  onCancel(): void {\n    this.router.navigate(['/']);\n  }\n\n  onDone(): void {\n    this.form.controls.color.setValue(this.color);\n    this.tasksStorage.saveTask(this.form.value as Task);\n    this.router.navigate(['/']);\n  }\n\n  onDate(): void {\n    console.log('Input date');\n  }\n\n  onColorPicker(event): void {\n    event.stopPropagation();\n    this.isColorPickerActive = true;\n  }\n\n  onCloseColorPicker(): void {\n    this.isColorPickerActive = false;\n  }\n\n  onColorSelect(color: string): void {\n    this.color = Colors[color];\n    this.form.controls.color.setValue(this.color);\n    this.isColorPickerActive = false;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "// Card\n\n.card {\n  box-sizing: border-box;\n  width: 100%;\n  height: 600px;\n  border: 3px solid #000000;\n  border-radius: 3px;\n  padding: 12px 24px;\n  display: flex;\n  justify-content: space-between;\n  flex-direction: column;\n\n  .content {\n    width: 100%;\n    display: flex;\n    justify-content: space-between;\n    flex-direction: column;\n  }\n\n  &__bottom {\n    display: flex;\n    justify-content: space-between;\n  }\n}\n\nimg {\n  cursor: pointer;\n}\n\n.row {\n  display: inline-flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\n.header {\n  align-items: flex-start;\n}\n\n.color-picker-button {\n  cursor: pointer;\n  margin-right: 2px;\n  width: 21px;\n  height: 21px;\n  background-color: #FA124F;\n  border-radius: 100%;\n  box-sizing: border-box;\n  position: relative;\n}\n\n.color-picker {\n  position: absolute;\n  right: 0;\n}\n\ntextarea {\n  border: 0;\n  box-sizing: inherit;\n  resize: vertical;\n  background: none;\n  overflow-y: auto;\n  max-height: 320px;\n  width: 92%;\n\n  &.dark {\n    color: #ffffff;\n\n    &::placeholder {\n      color: #ffffff;\n    }\n  }\n\n  &::placeholder {\n    color: #000;\n  }\n}\n",
                    "styleUrl": "./new-card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "themeService",
                        "type": "ThemeService"
                    },
                    {
                        "name": "tasksStorage",
                        "type": "TasksStorageService"
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "themeService",
                        "type": "ThemeService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "tasksStorage",
                        "type": "TasksStorageService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"wrapper\">\n  <app-task-card [isDark]=\"isDark$ | async\"></app-task-card>\n</div>\n\n"
        },
        {
            "name": "SectionSettingsComponent",
            "id": "component-SectionSettingsComponent-9d0d34a8616b93f453891716be37970f",
            "file": "src/app/components/section-settings/section-settings.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-section-settings",
            "styleUrls": [
                "./section-settings.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./section-settings.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isDark$",
                    "defaultValue": "this.themeService.isDark$",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "title",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { ThemeService } from '../../services/theme/theme.service';\nimport { BehaviorSubject } from 'rxjs';\nimport { ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'app-section-settings',\n  templateUrl: './section-settings.component.html',\n  styleUrls: ['./section-settings.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SectionSettingsComponent implements OnInit {\n  isDark$: BehaviorSubject<boolean> = this.themeService.isDark$;\n  title;\n\n  constructor(\n    private themeService: ThemeService,\n    private route: ActivatedRoute,\n  ) { }\n\n  ngOnInit(): void {\n    this.route.queryParams.subscribe((params) => {\n      this.title = params.title;\n    });\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./section-settings.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "themeService",
                        "type": "ThemeService"
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "themeService",
                        "type": "ThemeService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<section>\n  <app-section-title [title]=\"title | titlecase\" [isDark]=\"isDark$ | async\"></app-section-title>\n  <h1>Maximum items</h1>\n</section>\n"
        },
        {
            "name": "SectionTitleComponent",
            "id": "component-SectionTitleComponent-0a78f8ab4e72dd49bc743f18a50d9fae",
            "file": "src/app/ui/section-title/section-title.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-section-title",
            "styleUrls": [
                "./section-title.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./section-title.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "clickable",
                    "defaultValue": "false",
                    "line": 12
                },
                {
                    "name": "isDark",
                    "line": 11,
                    "type": "boolean"
                },
                {
                    "name": "title",
                    "line": 10,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-section-title',\n  templateUrl: './section-title.component.html',\n  styleUrls: ['./section-title.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SectionTitleComponent implements OnInit {\n  @Input() title: string;\n  @Input() isDark: boolean;\n  @Input() clickable = false;\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./section-title.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 12
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"section-title\" [ngClass]=\"{\n  'dark': isDark,\n  'section-title--clickable': clickable\n}\">{{title}}</div>\n"
        },
        {
            "name": "TaskCardComponent",
            "id": "component-TaskCardComponent-78f9ab5ee6e56eeea40b5e6b4fda8974",
            "file": "src/app/ui/task-card/task-card.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-task-card",
            "styleUrls": [
                "./task-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./task-card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "isDark",
                    "line": 17,
                    "type": "boolean"
                },
                {
                    "name": "task",
                    "line": 16,
                    "type": "Task"
                }
            ],
            "outputsClass": [
                {
                    "name": "accepted",
                    "defaultValue": "new EventEmitter<Task>()",
                    "line": 14,
                    "type": "EventEmitter"
                },
                {
                    "name": "closed",
                    "defaultValue": "new EventEmitter<void>()",
                    "line": 13,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "form",
                    "defaultValue": "this.fb.group({\n    id: [''],\n    title: [''],\n    date: [new Date()],\n    color: [Colors.RED],\n    isFavorite: [false],\n    isArchived: [false]\n  })",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "isColorPickerActive",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32
                },
                {
                    "name": "onCancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40
                },
                {
                    "name": "onCloseColorPicker",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58
                },
                {
                    "name": "onColorPicker",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onColorSelect",
                    "args": [
                        {
                            "name": "color",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "jsdoctags": [
                        {
                            "name": "color",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49
                },
                {
                    "name": "onDone",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { Colors } from '../../models/colors';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { Task } from '../../models/task';\n\n@Component({\n  selector: 'app-task-card',\n  templateUrl: './task-card.component.html',\n  styleUrls: ['./task-card.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TaskCardComponent implements OnInit {\n  @Output() closed = new EventEmitter<void>();\n  @Output() accepted = new EventEmitter<Task>();\n\n  @Input() task: Task;\n  @Input() isDark: boolean;\n\n  isColorPickerActive = false;\n\n  form: FormGroup = this.fb.group({\n    id: [''],\n    title: [''],\n    date: [new Date()],\n    color: [Colors.RED],\n    isFavorite: [false],\n    isArchived: [false]\n  });\n\n  constructor(private fb: FormBuilder) { }\n\n  ngOnInit(): void {\n    if (this.task) {\n      this.form.setValue(this.task);\n      console.log(this.task);\n    }\n    this.form.valueChanges.subscribe(x => console.log(x));\n  }\n\n  onCancel(): void {\n    this.closed.emit();\n  }\n\n  onDone(): void {\n    this.accepted.emit(this.form.value as Task);\n    // this.tasksStorage.saveTask(this.form.value as Task);\n  }\n\n  onDate(): void {\n    console.log('Input date');\n  }\n\n  onColorPicker(event): void {\n    event.stopPropagation();\n    this.isColorPickerActive = true;\n  }\n\n  onCloseColorPicker(): void {\n    this.isColorPickerActive = false;\n  }\n\n  onColorSelect(color: string): void {\n    this.form.controls.color.setValue(Colors[color]);\n    this.isColorPickerActive = false;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "// Card\n\n.card {\n  box-sizing: border-box;\n  width: 100%;\n  height: 600px;\n  border: 3px solid #000000;\n  border-radius: 3px;\n  padding: 12px 24px;\n  display: flex;\n  justify-content: space-between;\n  flex-direction: column;\n\n  .content {\n    width: 100%;\n    display: flex;\n    justify-content: space-between;\n    flex-direction: column;\n  }\n\n  &__bottom {\n    display: flex;\n    justify-content: space-between;\n  }\n}\n\nimg {\n  cursor: pointer;\n}\n\n.row {\n  display: inline-flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\n.header {\n  align-items: flex-start;\n}\n\n.color-picker-button {\n  cursor: pointer;\n  margin-right: 2px;\n  width: 21px;\n  height: 21px;\n  background-color: #FA124F;\n  border-radius: 100%;\n  box-sizing: border-box;\n  position: relative;\n}\n\n.color-picker {\n  position: absolute;\n  right: 0;\n}\n\ntextarea {\n  border: 0;\n  box-sizing: inherit;\n  resize: vertical;\n  background: none;\n  overflow-y: auto;\n  max-height: 320px;\n  width: 92%;\n\n  &.dark {\n    color: #ffffff;\n\n    &::placeholder {\n      color: #ffffff;\n    }\n  }\n\n  &::placeholder {\n    color: #000;\n  }\n}\n",
                    "styleUrl": "./task-card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"card\" [ngStyle]=\"{'border-color': form.controls.color.value}\">\n  <div class=\"content\" [formGroup]=\"form\">\n    <div class=\"row header\">\n        <textarea\n          type=\"text\"\n          placeholder=\"New...\"\n          formControlName=\"title\"\n          [ngClass]=\"{'dark': isDark}\"></textarea>\n      <div\n        class=\"color-picker-button\"\n        [style.backgroundColor]=\"form.controls.color.value\"\n        (click)=\"onColorPicker($event)\">\n        <app-color-picker\n          class=\"color-picker\"\n          *ngIf=\"isColorPickerActive\"\n          [isDark]=\"isDark\"\n          (colorSelect)=\"onColorSelect($event)\"\n          (outsideClick)=\"onCloseColorPicker()\"></app-color-picker>\n      </div>\n    </div>\n    <div class=\"row\">\n      <app-date-input formControlName=\"date\"></app-date-input>\n      <img [src]=\"(isDark) ? 'assets/svg/access_time-dark-24px.svg' : 'assets/svg/access_time-24px.svg'\" alt=\"Date\"\n           (click)=\"onDate()\">\n    </div>\n  </div>\n  <div class=\"card__bottom\">\n    <img [src]=\"(isDark) ? 'assets/svg/clear-dark-24px.svg' : 'assets/svg/clear-24px.svg'\" alt=\"Cancel\"\n         (click)=\"onCancel()\">\n    <img [src]=\"(isDark) ? 'assets/svg/done-dark-24px.svg' : 'assets/svg/done-24px.svg'\" alt=\"Done\" (click)=\"onDone()\">\n  </div>\n</div>\n\n\n"
        },
        {
            "name": "TaskComponent",
            "id": "component-TaskComponent-2eb654c96f676ed81683964d102d9fa7",
            "file": "src/app/components/task/task.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-task",
            "styleUrls": [
                "./task.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./task.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isDark$",
                    "defaultValue": "this.themeService.isDark$",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "task",
                    "type": "Task",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Task } from 'src/app/models/task';\nimport { TasksStorageService } from '../../services/tasks-storage/tasks-storage.service';\nimport { BehaviorSubject } from 'rxjs';\nimport { ThemeService } from '../../services/theme/theme.service';\n\n@Component({\n  selector: 'app-task',\n  templateUrl: './task.component.html',\n  styleUrls: ['./task.component.scss']\n})\nexport class TaskComponent implements OnInit {\n  isDark$: BehaviorSubject<boolean> = this.themeService.isDark$;\n  task: Task;\n\n  constructor(\n    private route: ActivatedRoute,\n    private themeService: ThemeService,\n    private tasksStorage: TasksStorageService\n  ) { }\n\n  ngOnInit(): void {\n    this.route.queryParams.subscribe((params) => {\n      this.task = this.tasksStorage.getTaskById(params.id);\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./task.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "themeService",
                        "type": "ThemeService"
                    },
                    {
                        "name": "tasksStorage",
                        "type": "TasksStorageService"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "themeService",
                        "type": "ThemeService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "tasksStorage",
                        "type": "TasksStorageService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"wrapper\">\n  <app-task-card [task]=\"task\" [isDark]=\"isDark$ | async\"></app-task-card>\n</div>\n"
        },
        {
            "name": "TaskItemComponent",
            "id": "component-TaskItemComponent-04e2125e2312b356140e3650befd23ea",
            "file": "src/app/ui/task-item/task-item.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-task-item",
            "styleUrls": [
                "./task-item.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./task-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "color",
                    "defaultValue": "Colors.RED",
                    "line": 12
                },
                {
                    "name": "isActive",
                    "line": 14,
                    "type": "boolean"
                },
                {
                    "name": "isDark",
                    "line": 13,
                    "type": "boolean"
                },
                {
                    "name": "isFavorite",
                    "line": 15,
                    "type": "boolean"
                },
                {
                    "name": "title",
                    "line": 11,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19
                },
                {
                    "name": "onBack",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onFavorite",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onTime",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input, OnInit } from '@angular/core';\nimport { Colors } from '../../models/colors';\n\n@Component({\n  selector: 'app-task-item',\n  templateUrl: './task-item.component.html',\n  styleUrls: ['./task-item.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TaskItemComponent implements OnInit {\n  @Input() title: string;\n  @Input() color = Colors.RED;\n  @Input() isDark: boolean;\n  @Input() isActive: boolean;\n  @Input() isFavorite: boolean;\n\n  constructor() { }\n\n  ngOnInit(): void {\n    if (this.isActive) {\n      this.title = '2 days remaining...';\n    }\n  }\n\n  onFavorite(event: any): void {\n    event.stopPropagation();\n    this.isFavorite = !this.isFavorite;\n  }\n\n  onTime(event: any): void {\n    event.stopPropagation();\n    this.isActive = true;\n  }\n\n  onBack(event: any): void {\n    event.stopPropagation();\n    this.isActive = false;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".item {\n  outline: none;\n  box-sizing: border-box;\n  cursor: pointer;\n  border: 3px solid #FA124F;\n  border-radius: 3px;\n  width: 100%;\n  height: 40px;\n  padding: 0 9px;\n  display: flex;\n  align-items: center;\n  margin-bottom: 12px;\n  justify-content: space-between;\n  transition: 200ms;\n\n  &:hover {\n    box-shadow: 0 0 4px 4px rgba(255, 230, 32, 0.25);\n  }\n\n  &--active {\n    box-sizing: border-box;\n    border: 3px solid #FFE71D;\n    background: #FFE71D;\n    border-radius: 3px;\n    width: 100%;\n    height: 40px;\n    padding: 0 9px;\n    display: flex;\n    align-items: center;\n  }\n}\n\n.text {\n  color: #000000;\n\n  &.dark {\n    color: #ffffff;\n  }\n}\n\n.buttons {\n  display: flex;\n  align-items: center;\n\n  img {\n    margin-left: 14px;\n  }\n}\n",
                    "styleUrl": "./task-item.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 15
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"item\" [ngClass]=\"{'item--active': isActive}\" [ngStyle]=\"{'border-color': color, 'background-color': isActive ? color : 'unset'}\">\n  <div class=\"text\" [ngClass]=\"{'dark': isDark && !isActive}\">{{title}}</div>\n  <div class=\"buttons\" *ngIf=\"!isActive; else activeButtons\">\n    <img *ngIf=\"!isFavorite; else favorite\" [src]=\"isDark ? 'assets/svg/favorite_border-dark-24px.svg' : 'assets/svg/favorite_border-24px.svg'\" (click)=\"onFavorite($event)\">\n    <ng-template #favorite>\n      <img [src]=\"isDark ? 'assets/svg/favorite-dark-24px.svg' : 'assets/svg/favorite-24px.svg'\" (click)=\"onFavorite($event)\">\n    </ng-template>\n    <img [src]=\"isDark ? 'assets/svg/access_time-dark-24px.svg' : 'assets/svg/access_time-24px.svg'\" (click)=\"onTime($event)\">\n  </div>\n  <ng-template #activeButtons>\n    <div class=\"buttons\">\n      <img src=\"assets/svg/east-24px.svg\" (click)=\"onBack($event)\">\n    </div>\n  </ng-template>\n</div>\n"
        },
        {
            "name": "TrashcanComponent",
            "id": "component-TrashcanComponent-19056d3f15726851881234f5685f0aa6",
            "file": "src/app/components/trashcan/trashcan.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-trashcan",
            "styleUrls": [
                "./trashcan.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./trashcan.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isDark$",
                    "defaultValue": "this.themeService.isDark$",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "tasks",
                    "type": "Task[]",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { ThemeService } from '../../services/theme/theme.service';\nimport { BehaviorSubject } from 'rxjs';\nimport { TasksStorageService } from '../../services/tasks-storage/tasks-storage.service';\nimport { Task } from 'src/app/models/task';\n\n@Component({\n  selector: 'app-trashcan',\n  templateUrl: './trashcan.component.html',\n  styleUrls: ['./trashcan.component.scss']\n})\nexport class TrashcanComponent implements OnInit {\n  isDark$: BehaviorSubject<boolean> = this.themeService.isDark$;\n  tasks: Task[];\n\n  constructor(\n    private themeService: ThemeService,\n    private tasksStorage: TasksStorageService\n  ) { }\n\n  ngOnInit(): void {\n    this.tasks = this.tasksStorage.getTasks().filter(task => task.isArchived);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./trashcan.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "themeService",
                        "type": "ThemeService"
                    },
                    {
                        "name": "tasksStorage",
                        "type": "TasksStorageService"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "themeService",
                        "type": "ThemeService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "tasksStorage",
                        "type": "TasksStorageService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<section>\n  <app-section-title title=\"Archived\" [isDark]=\"isDark$ | async\"></app-section-title>\n  <app-task-item *ngFor=\"let task of tasks\" [title]=\"task.title\" [isDark]=\"isDark$ | async\"></app-task-item>\n</section>\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ColorPickerModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ColorPickerComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ColorPickerComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DateInputModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DateInputComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DateInputComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "HomeModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "HomeComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "HomeRoutingModule"
                        },
                        {
                            "name": "SectionTitleModule"
                        },
                        {
                            "name": "TaskItemModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "HomeRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MoreMenuModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "MoreMenuComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NewCardModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NewCardComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ColorPickerModule"
                        },
                        {
                            "name": "NewCardRoutingModule"
                        },
                        {
                            "name": "TaskCardModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NewCardRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SectionSettingsModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SectionSettingsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SectionSettingsRoutingModule"
                        },
                        {
                            "name": "SectionTitleModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SectionSettingsRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SectionTitleModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SectionTitleComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SectionTitleComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TaskCardModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TaskCardComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ColorPickerModule"
                        },
                        {
                            "name": "DateInputModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "TaskCardComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TaskItemModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TaskItemComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "TaskItemComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TaskModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TaskComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "TaskCardModule"
                        },
                        {
                            "name": "TaskRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TaskRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TrashcanModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TrashcanComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SectionTitleModule"
                        },
                        {
                            "name": "TaskItemModule"
                        },
                        {
                            "name": "TrashcanRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TrashcanRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "DARK_THEME_STORAGE_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/services/theme-storage/theme-storage.service.ts",
                "type": "string",
                "defaultValue": "'isDark'"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui/color-picker/color-picker.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui/date-input/date-input.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui/task-card/task-card.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "literal type"
            },
            {
                "name": "TASKS_STORAGE_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/services/tasks-storage/tasks-storage.service.ts",
                "type": "string",
                "defaultValue": "'tasks'"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui/color-picker/color-picker.stories.ts",
                "type": "Story<ColorPickerComponent>",
                "defaultValue": "(args: ColorPickerComponent) => ({\n  component: ColorPickerComponent,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui/date-input/date-input.stories.ts",
                "type": "Story<DateInputComponent>",
                "defaultValue": "(args: DateInputComponent) => ({\n  component: DateInputComponent,\n  moduleMetadata: {\n    imports: [\n      DateInputModule\n    ]\n  },\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui/task-card/task-card.stories.ts",
                "type": "Story<TaskCardComponent>",
                "defaultValue": "(args: TaskCardComponent) => ({\n  component: TaskCardComponent,\n  moduleMetadata: {\n    imports: [\n      TaskCardModule\n    ]\n  },\n  props: args,\n})"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [
            {
                "name": "Colors",
                "childs": [
                    {
                        "name": "RED",
                        "value": "#FA114F"
                    },
                    {
                        "name": "ORANGE",
                        "value": "#FF3B30"
                    },
                    {
                        "name": "YELLOW",
                        "value": "#FFE620"
                    },
                    {
                        "name": "GREEN",
                        "value": "#06DE71"
                    },
                    {
                        "name": "CYAN",
                        "value": "#00F5E9"
                    },
                    {
                        "name": "BLUE",
                        "value": "#5AC8FA"
                    },
                    {
                        "name": "DARK_BLUE",
                        "value": "#2094FA"
                    },
                    {
                        "name": "PURPLE",
                        "value": "#787AFF"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/models/colors.ts"
            }
        ],
        "groupedVariables": {
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "literal type"
                }
            ],
            "src/app/services/theme-storage/theme-storage.service.ts": [
                {
                    "name": "DARK_THEME_STORAGE_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/services/theme-storage/theme-storage.service.ts",
                    "type": "string",
                    "defaultValue": "'isDark'"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "src/app/ui/color-picker/color-picker.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui/color-picker/color-picker.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui/color-picker/color-picker.stories.ts",
                    "type": "Story<ColorPickerComponent>",
                    "defaultValue": "(args: ColorPickerComponent) => ({\n  component: ColorPickerComponent,\n  props: args,\n})"
                }
            ],
            "src/app/ui/date-input/date-input.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui/date-input/date-input.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui/date-input/date-input.stories.ts",
                    "type": "Story<DateInputComponent>",
                    "defaultValue": "(args: DateInputComponent) => ({\n  component: DateInputComponent,\n  moduleMetadata: {\n    imports: [\n      DateInputModule\n    ]\n  },\n  props: args,\n})"
                }
            ],
            "src/app/ui/task-card/task-card.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui/task-card/task-card.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui/task-card/task-card.stories.ts",
                    "type": "Story<TaskCardComponent>",
                    "defaultValue": "(args: TaskCardComponent) => ({\n  component: TaskCardComponent,\n  moduleMetadata: {\n    imports: [\n      TaskCardModule\n    ]\n  },\n  props: args,\n})"
                }
            ],
            "src/app/services/tasks-storage/tasks-storage.service.ts": [
                {
                    "name": "TASKS_STORAGE_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/services/tasks-storage/tasks-storage.service.ts",
                    "type": "string",
                    "defaultValue": "'tasks'"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {
            "src/app/models/colors.ts": [
                {
                    "name": "Colors",
                    "childs": [
                        {
                            "name": "RED",
                            "value": "#FA114F"
                        },
                        {
                            "name": "ORANGE",
                            "value": "#FF3B30"
                        },
                        {
                            "name": "YELLOW",
                            "value": "#FFE620"
                        },
                        {
                            "name": "GREEN",
                            "value": "#06DE71"
                        },
                        {
                            "name": "CYAN",
                            "value": "#00F5E9"
                        },
                        {
                            "name": "BLUE",
                            "value": "#5AC8FA"
                        },
                        {
                            "name": "DARK_BLUE",
                            "value": "#2094FA"
                        },
                        {
                            "name": "PURPLE",
                            "value": "#787AFF"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/models/colors.ts"
                }
            ]
        },
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "loadChildren": "./components/home/home.module#HomeModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/components/home/home-routing.module.ts",
                                        "module": "HomeRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "HomeComponent"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "HomeModule"
                            }
                        ]
                    },
                    {
                        "path": "new",
                        "loadChildren": "./components/new-card/new-card.module#NewCardModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/components/new-card/new-card-routing.module.ts",
                                        "module": "NewCardRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "NewCardComponent"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "NewCardModule"
                            }
                        ]
                    },
                    {
                        "path": "trashcan",
                        "loadChildren": "./components/trashcan/trashcan.module#TrashcanModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/components/trashcan/trashcan-routing.module.ts",
                                        "module": "TrashcanRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "TrashcanComponent"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "TrashcanModule"
                            }
                        ]
                    },
                    {
                        "path": "section-settings",
                        "loadChildren": "./components/section-settings/section-settings.module#SectionSettingsModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/components/section-settings/section-settings-routing.module.ts",
                                        "module": "SectionSettingsRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "SectionSettingsComponent"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "SectionSettingsModule"
                            }
                        ]
                    },
                    {
                        "path": "task",
                        "loadChildren": "./components/task/task.module#TaskModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/components/task/task-routing.module.ts",
                                        "module": "TaskRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "TaskComponent"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "TaskModule"
                            }
                        ]
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/home/home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/components/new-card/new-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NewCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/components/section-settings/section-settings.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SectionSettingsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/task/task.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TaskComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/trashcan/trashcan.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TrashcanComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/models/task.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TaskModel",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/models/task.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Task",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/services/tasks-storage/tasks-storage.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TasksStorageService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/services/tasks-storage/tasks-storage.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TASKS_STORAGE_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/theme-storage/theme-storage.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ThemeStorageService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/services/theme-storage/theme-storage.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DARK_THEME_STORAGE_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/theme/theme.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ThemeService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/color-picker/color-picker.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ColorPickerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/color-picker/color-picker.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/color-picker/color-picker.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/date-input/date-input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DateInputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/date-input/date-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/date-input/date-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/more-menu/more-menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MoreMenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/section-title/section-title.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SectionTitleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/task-card/task-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TaskCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/task-card/task-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/task-card/task-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/task-item/task-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TaskItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}